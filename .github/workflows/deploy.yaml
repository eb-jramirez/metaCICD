name: CI/CD Matrix Deployment

on:
  push:
    branches: main
  pull_request:
    branches: main

jobs:
  deploy-container:
    name: Prepare Deployment Container
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

  deploy:
    name: Deploy Services
    runs-on: ubuntu-latest
    needs: [deploy-container]

    strategy:
      max-parallel: 1
      fail-fast: true
      matrix:
        env: [dev, qat, stg, prd]
        include:
          - name: dev
            cluster: dev-cluster
            service: jobposting-processing
            user: admin-DEV
            kafka: kafka/dev/path
            group: job-posting-dev
            k_cluster: chamomile
            opensearch: opensearch/public/dev/masteruser
          - name: qat
            cluster: qat-cluster
            service: jobposting-processing
            user: admin-QAT
            kafka: kafka/qat/path
            group: job-posting-qat
            k_cluster: chamomile
            opensearch: opensearch/public/qat/masteruser
          - name: stg
            cluster: stg-cluster
            service: jobposting-processing
            user: admin-STG
            kafka: kafka/stg/path
            group: job-posting-stg
            k_cluster: hippos
            opensearch: opensearch/public/stg/masteruser
          - name: prd
            cluster: prd-cluster
            service: jobposting-processing
            user: admin-PRD
            kafka: kafka/prd/path
            group: job-posting-prd
            k_cluster: hippos
            opensearch: opensearch/public/prd/masteruser

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Deploy Service
        run: |
          echo "Deploying service for environment ${{ matrix.env }}..."
          echo "Cluster: ${{ matrix.cluster }}"
          echo "User: ${{ matrix.user }}"
          echo "Kafka: ${{ matrix.kafka }}"
          echo "Group: ${{ matrix.group }}"
          echo "K Cluster: ${{ matrix.k_cluster }}"
          echo "Opensearch: ${{ matrix.opensearch }}"
          echo "Deployment timestamp: $(date -u +%Y-%m-%dT%H:%M:%SZ)"
          echo "Deployment timestamp: $(date -u +%Y-%m-%dT%H:%M:%SZ)" >> $GITHUB_WORKSPACE/logs/deployment-${{ matrix.env }}.log

      - name: Record End Time
        id: end_time
        run: echo "::set-output name=end_time::$(date -u +%Y-%m-%dT%H:%M:%SZ)"
        if: matrix.env == 'dev'  # Record end time only for the first environment (dev)

  generate-logs:
    name: Generate Timestamp Logs
    needs: [deploy]
    runs-on: ubuntu-latest

    steps:
      - name: Create Logs Directory
        run: mkdir -p logs

      - name: Get Deployment Timestamps
        run: |
          for env in dev qat stg prd; do
            echo "Deployment timestamp for $env: $(date -u)" >> logs/deployment-$env.log
          
            # Adding delay after deploying the "dev" environment
            if [ "$env" == "dev" ]; then
              sleep 10  # Adjust the delay time as needed (in seconds)
            fi
          done

      - name: Append Timestamps to Logs
        run: |
          echo "Deployment timestamp: $(date -u +%Y-%m-%dT%H:%M:%S%Z)" >> logs/deployment-${{ matrix.env }}.log

  process-outputs:
    name: Process Outputs
    needs: [deploy]
    runs-on: ubuntu-latest

    steps:
      - name: Get Deployment Timestamps
        run: |
          grep -oP "Deployment timestamp: \K.*" $GITHUB_WORKSPACE/logs/deployment-${{ matrix.env }}.log | sort -n
